{"version":3,"sources":["App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["defaultItem","text","isCompleted","Todo","todo","index","completeTodo","removeTodo","undoTodo","className","style","textDecoration","backgroundColor","onClick","title","TodoForm","addTodo","React","useState","value","setValue","handleSubmit","e","preventDefault","trim","length","onSubmit","type","onChange","target","placeholder","autoFocus","App","todos","setTodos","JSON","parse","localStorage","getItem","newTodos","setItem","stringify","allTasksCompleted","splice","filter","item","hasOwnProperty","alert","launchConfetti","end","Date","now","frame","confetti","particleCount","startVelocity","angle","spread","origin","x","y","requestAnimationFrame","map","totalItems","totalCompletedItems","totalIncompleteItems","displayStatistics","clear","pop","clearAllTodo","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d078e525.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport confetti from 'canvas-confetti';\n\nconst defaultItem = [{ text: \"Add some items to list\", isCompleted: false }];\n\nfunction Todo({ todo, index, completeTodo, removeTodo, undoTodo }) {\n  return (\n    <div \n      className=\"todo\"\n      style={{ \n        textDecoration: todo.isCompleted ? \"line-through\" : \"\", \n        backgroundColor: todo.isCompleted ? \"darkgray\": \"\"\n      }}\n    >\n      <div className=\"todo-text\">\n        {todo.text}\n      </div>\n      <div className=\"btn-div\">\n        { todo.isCompleted ?\n            <span className=\"btn-undo-todo material-icons md-24\" onClick={() => undoTodo(index)} title=\"Undo Complete\">undo</span>\n          : <span className=\"btn-complete-todo material-icons md-24\" onClick={() => completeTodo(index)} title=\"Complete Item\">check_circle</span>\n        }\n        <span className=\"material-icons md-24 btn-remove-todo\" onClick={() => removeTodo(index)} title=\"Remove Item\">delete</span>\n      </div>\n    </div>\n  );\n};\n\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = React.useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    // prevent adding blank values\n    if (!value || !value.trim() || !value.length === 0) {\n      setValue(\"\");\n      return;\n    }\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n        placeholder=\"Enter your to-do item\"\n        title=\"Enter your to-do item\"\n        autoFocus\n      />\n      <button className=\"btn-placeholder\"><span className=\"material-icons md-30 btn-add-todo\" onSubmit={handleSubmit} title=\"Add Item\">add_circle</span></button>\n    </form>\n  );\n}\n\nfunction App() {\n  var todos, setTodos;\n  // const [todos, setTodos] = React.useState([\n  //   { text: \"Learn about React\", isCompleted: false },\n  //   { text: \"Add some items to list\", isCompleted: false },\n  //   { text: \"Build really cool todo app\", isCompleted: false }\n  // ]);\n  [todos,setTodos] = React.useState(JSON.parse(localStorage.getItem('todos')) || defaultItem);\n  // console.log('TempTodo: ',todos);\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text, isCompleted: false }];\n    setTodos(newTodos);\n    localStorage.setItem('todos', JSON.stringify(newTodos));\n    // let localData = JSON.parse(localStorage.getItem('todos') || \"[]\");\n    // console.log(localData);\n  }\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n    localStorage.setItem('todos', JSON.stringify(newTodos));\n    allTasksCompleted(newTodos);\n  };\n\n  const undoTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = false;\n    setTodos(newTodos);\n    localStorage.setItem('todos', JSON.stringify(newTodos));\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    if(newTodos.length === 0) {\n        setTodos(defaultItem)\n        localStorage.setItem('todos', JSON.stringify(newTodos));\n    }\n    setTodos(newTodos);\n    localStorage.setItem('todos', JSON.stringify(newTodos));\n    // allTasksCompleted(newTodos);\n  };\n\n  const displayStatistics = () => {\n    const totalItems = todos.length;\n    const totalCompletedItems = todos.filter(item => item.isCompleted === true).length;\n    const totalIncompleteItems = todos.filter(item => item.isCompleted === false || !item.hasOwnProperty('isCompleted')).length;\n    \n    alert('*** Statistics ***\\n\\n'\n      + 'Items to-do: ' + totalItems \n      + '\\nCompleted:  ' + totalCompletedItems \n      + '\\nIncomplete:  ' + totalIncompleteItems);\n  }\n\n  const clearAllTodo = () => {\n    if(localStorage.length > 0) {\n      localStorage.clear();\n      const newTodos = [...todos];\n      while(newTodos.length !== 0) {\n        newTodos.pop();\n      }\n      setTodos(newTodos);\n      localStorage.setItem('todos', JSON.stringify(newTodos));\n    }\n  }\n\n  const allTasksCompleted = (newTodos) => {\n    const totalIncompleteItems = newTodos.filter(item => item.isCompleted === false || !item.hasOwnProperty('isCompleted')).length;\n    \n    if (totalIncompleteItems === 0) {\n      alert('Woohooo!! You\\'ve completed all the tasks!');\n      launchConfetti();\n    }\n  }\n\n  const launchConfetti = () => {\n      // launch confetti for 1.5 seconds\n      var duration = 1.5 * 1000;\n      var end = Date.now() + duration;\n\n      (function frame() {\n        // launch a few confetti from the left edge\n        confetti({\n          particleCount: 10,\n          startVelocity: 80,\n          angle: 60,\n          spread: 55,\n          origin: { x: 0, y: 1 }\n        });\n        // and launch a few from the right edge\n        confetti({\n          particleCount: 10,\n          startVelocity: 80,\n          angle: 120,\n          spread: 55,\n          origin: { x: 1, y: 1 }\n        });\n\n        // keep going until we are out of time\n        if (Date.now() < end) {\n          requestAnimationFrame(frame);\n        }\n      }());\n  }\n\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"todo-title\">To-Do App</h1>\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n            undoTodo={undoTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n        <div className=\"row\">\n          <div className=\"col\"><button className=\"btn-statistics\" onClick={() => displayStatistics()} title=\"Get Statistics\">Get Statistics</button></div>\n          <div className=\"col btn-clear-row\"><span className=\"material-icons md-30 btn-clear\" onClick={() => clearAllTodo()} title=\"Clear List\">delete_forever</span></div>\n        </div>\n      </div>\n    <script src=\"confetti.js\"/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}