{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","text","onClick","title","TodoForm","addTodo","React","useState","value","setValue","handleSubmit","e","preventDefault","onSubmit","type","onChange","target","placeholder","App","todos","setTodos","newTodos","splice","map","totalItems","length","totalCompletedItems","filter","item","totalIncompleteItems","hasOwnProperty","alert","displayStatistics","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAGA,SAASA,EAAT,GAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WACzC,OACE,sBACEC,UAAU,OACVC,MAAO,CAAEC,eAAgBN,EAAKO,YAAc,eAAiB,IAF/D,UAIE,qBAAKH,UAAU,YAAf,SACGJ,EAAKQ,OAER,sBAAKJ,UAAU,UAAf,UAEE,sBAAMA,UAAU,yCAAyCK,QAAS,kBAAMP,EAAaD,IAAQS,MAAM,gBAAnG,0BAEA,sBAAMN,UAAU,uCAAuCK,QAAS,kBAAMN,EAAWF,IAAQS,MAAM,cAA/F,0BAQR,SAASC,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QAClB,EAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAe,SAAAC,GACnBA,EAAEC,iBACGJ,IACLH,EAAQG,GACRC,EAAS,MAGX,OACE,uBAAMI,SAAUH,EAAhB,UACE,uBACEI,KAAK,OACLjB,UAAU,QACVW,MAAOA,EACPO,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,QACjCS,YAAY,wBACZd,MAAM,0BAGR,wBAAQN,UAAU,kBAAlB,SAAoC,sBAAMA,UAAU,oCAAoCgB,SAAUH,EAAcP,MAAM,WAAlF,6BAyD3Be,MApDf,WACE,MAA0BZ,IAAMC,SAAS,CACvC,CAAEN,KAAM,oBAAqBD,aAAa,GAC1C,CAAEC,KAAM,wBAAyBD,aAAa,GAC9C,CAAEC,KAAM,6BAA8BD,aAAa,KAHrD,mBAAOmB,EAAP,KAAcC,EAAd,KAWMzB,EAAe,SAAAD,GACnB,IAAM2B,EAAQ,YAAOF,GACrBE,EAAS3B,GAAOM,aAAc,EAC9BoB,EAASC,IAGLzB,EAAa,SAAAF,GACjB,IAAM2B,EAAQ,YAAOF,GACrBE,EAASC,OAAO5B,EAAO,GACvB0B,EAASC,IAWX,OACE,sBAAKxB,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,uBACA,sBAAKA,UAAU,YAAf,UACGsB,EAAMI,KAAI,SAAC9B,EAAMC,GAAP,OACT,cAACF,EAAD,CAEEE,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,GAJPF,MAOT,cAACU,EAAD,CAAUC,QAtCA,SAAAJ,GACd,IAAMoB,EAAQ,sBAAOF,GAAP,CAAc,CAAElB,UAC9BmB,EAASC,MAqCL,wBAAQxB,UAAU,iBAAiBK,QAAS,kBAtBxB,WACxB,IAAMsB,EAAaL,EAAMM,OACnBC,EAAsBP,EAAMQ,QAAO,SAAAC,GAAI,OAAyB,IAArBA,EAAK5B,eAAsByB,OACtEI,EAAuBV,EAAMQ,QAAO,SAAAC,GAAI,OAAyB,IAArBA,EAAK5B,cAA0B4B,EAAKE,eAAe,kBAAgBL,OAErHM,MAAM,gBAAkBP,EAAa,gBAAkBE,EAAsB,iBAAmBG,GAiB1CG,IAAqB7B,MAAM,iBAA7E,mCCpFO8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9b4fec5b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n  return (\n    <div \n      className=\"todo\"\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\n    >\n      <div className=\"todo-text\">\n        {todo.text}\n      </div>\n      <div className=\"btn-div\">\n        {/* <button className=\"btn-complete-todo\" onClick={() => completeTodo(index)} title=\"Complete Item\">Complete</button> */}\n        <span className=\"btn-complete-todo material-icons md-24\" onClick={() => completeTodo(index)} title=\"Complete Item\">check_circle</span>\n        {/* <button className=\"btn-remove-todo\" onClick={() => removeTodo(index)} title=\"Remove Item\">x</button> */}\n        <span className=\"material-icons md-24 btn-remove-todo\" onClick={() => removeTodo(index)} title=\"Remove Item\">\n          delete\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = React.useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n        placeholder=\"Enter your to-do item\"\n        title=\"Enter your to-do item\"\n      />\n      {/* <button className=\"btn-add-todo\" title=\"Add Item\"> + </button> */}\n      <button className=\"btn-placeholder\"><span className=\"material-icons md-30 btn-add-todo\" onSubmit={handleSubmit} title=\"Add Item\">add_circle</span></button>\n    </form>\n  );\n}\n\nfunction App() {\n  const [todos, setTodos] = React.useState([\n    { text: \"Learn about React\", isCompleted: false },\n    { text: \"Meet friend for lunch\", isCompleted: false },\n    { text: \"Build really cool todo app\", isCompleted: false }\n  ]);\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  }\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  const displayStatistics = () => {\n    const totalItems = todos.length;\n    const totalCompletedItems = todos.filter(item => item.isCompleted === true).length;\n    const totalIncompleteItems = todos.filter(item => item.isCompleted === false || !item.hasOwnProperty('isCompleted')).length;\n    \n    alert('Items To-do: ' + totalItems + '\\nCompleted: ' + totalCompletedItems + '\\nIncomplete: ' + totalIncompleteItems)\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"todo-title\">To-Do App</h1>\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n        <button className=\"btn-statistics\" onClick={() => displayStatistics()} title=\"Get Statistics\">Get Statistics</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}